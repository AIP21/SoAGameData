##########  LayerProperties.yml  -  specification and internal format/structure - last updated: 27.06.2015

  #  LayerProperties.yml contains a list of all texture layers, sorted by their layer names, the file path must be "Blocks/LayerProperties.yml"
  #  This file contains information about the texture file paths, texture handling methods and color properties for each texture layer
  #  All texture paths specified in this file must be relative to the texture pack and therefore show the folder+subfolders where the texture is located!

  
####  Internal structure of LayerProperties.yml
  
(Layer Name):
  path: (path of texture file)
  #  Required. Every texture layer needs at least a texture path specified.
  normalMap: (path of normal map file)
  #  Optional. If missing, then no normal map is applied to the layer.
  dispMap: (path of displacement map file)
  #  Optional. If missing, then no displacement map is applied to the layer.
  specularMap: (path of specular map file)
  #  Optional. If missing, then no specular map is applied to the layer.
  color: <biome | water | (path of custom color map) | [R, G, B]>
  #  Optional. If not specified, then "[255, 255, 255]" is used as the default setting.
  #  biome: Colors from the biome color map of the loaded planet are multiplied with the texture colors of the layer
  #  water: Colors from the water color map of the loaded planet are multiplied with the texture colors of the layer
  #  As an alternative, a path to a custom color map inside the texture pack or a single RGB color can be defined
  altColors:
  #  Optional. If not specified, then there are no alternate colors applied to this layer.
  #  Multiplies the texture colors of the layer with one of up to 16 alternate colors, which can be defined here. Other color settings are overwritten by this.
  #  Single blocks or larger block structures (e.g. leaves of trees) are generated using one specific alternate color, randomly picked from this list:
    color0: [R, G, B]
    color1: [R, G, B]
    color2: [R, G, B]
    color3: [R, G, B]
    color4: [R, G, B]
    color5: [R, G, B]
    color6: [R, G, B]
    color7: [R, G, B]
    color8: [R, G, B]
    color9: [R, G, B]
    color10: [R, G, B]
    color11: [R, G, B]
    color12: [R, G, B]
    color13: [R, G, B]
    color14: [R, G, B]
    color15: [R, G, B]
  method: <connect | horizontal | vertical | grass | repeat | random | flora>
  #  Optional. If missing, then there's no texture handling method applied to the layer.
  #  For further explanations, additional properties, templates and restrictions for the texture handling methods, see below.
  coupling: <id | texture | [list of layer names]>
  #  Optional. If not specified in the file, the default setting should be "id".
  #  id: Only blocks having the same block ID are coupled and will connect, blocks using the same layer but a different block ID do not connect to them
  #  texture: All blocks using the same texture layer are coupled and will connect, independent of block ID
  #  As an alternative, a list of layer names can be defined, separated by commas. The layers will connect to each other, independent of block IDs.
  #  The layer name list only works when the coupled layers use the same connection method, otherwise they give an error



##########  Explanation/additional properties/templates for the texture handling methods:


  ###  Classic 8-way connection method:
  method: connect
  #  Source texture is required to have 12x4 tiles
  #  Template: www.seedofandromeda.com/assets/images/modding/texture/method_connect.png
  innerSeams: <true | false>
  #  Optional. If not specified in the file, then "false" is used as the default setting
  #  true: Textures do not connect around inner corners (see www.seedofandromeda.com/assets/images/modding/texture/method_connect_innerSeams_true.png)
  #  false: Textures connect around inner corners (see www.seedofandromeda.com/assets/images/modding/texture/method_connect_innerSeams_false.png)


  ###  Horizontal 2-way connection method:
  method: horizontal
  #  Source texture is required to have 4x1 tiles
  #  Template: www.seedofandromeda.com/assets/images/modding/texture/method_horizontal.png
  innerSeams: <true | false>
  #  Optional. If not specified in the file, then "false" is used as the default setting
  #  true: Textures do not connect around inner corners (see www.seedofandromeda.com/assets/images/modding/texture/method_horizontal_innerSeams_true.png)
  #  false: Textures connect around inner corners (see www.seedofandromeda.com/assets/images/modding/texture/method_horizontal_innerSeams_false.png)


  ###  Vertical 2-way connection method:
  method: vertical
  #  Source texture is required to have 1x4 tiles
  #  Template: www.seedofandromeda.com/assets/images/modding/texture/method_vertical.png
  reducedMethod: <none | top | bottom>
  #  Optional. If not specified in the file, then "none" is used as the default setting
  #  none: No reduced method applied, all 4 tiles of the tile set are used and connect as usual
  #  top: Only tiles 1 and 2 are used, the others ignored. This reduced method is used when only the top block should show a different texture.
  #  bottom: Only tiles 2 and 3 are used, the others ignored. This reduced method is used when only the bottom block should show a different texture.


  ###  "Better Grass" connection method:
  method: grass
  #  Source texture is required to have 3x3 tiles
  #  Template and explanation: www.seedofandromeda.com/assets/images/modding/texture/method_grass.png
  #  This method actually needs 10 tiles (0-9), but the top texture of the respective block is used as tile 9 (connects to tiles 4-8)
  #  Tile 9 uses the same texture methods and texture features than the top texture, independent of the texture features applied to the 3x3 tile set


  ###  Repeating texture method:
  method: repeat
  #  Uses a larger texture (with a defined number of x and y tiles) which is displayed over an area of x and y blocks
  #  Repeats itself over very large areas, therefore reducing lattice effects compared to single tile textures
  #  The number of x and y tiles must be powers of 2 and must not be higher than 16, otherwise this method gives an error
  symmetry: <none | opposite>
  #  Optional. If not specified in the file, then "none" is used as the default setting
  #  none: All 6 faces are textured independently
  #  opposite: Opposing faces show the same texture, but each pair can potentially have a different texture


  ###  Random textures method:
  method: random
  #  Source texture can contain any number of tiles in a horizontal arrangement
  #  Randomization of blocks using this texture tile set is done in all directions in-game (x, y, z)
  weights: [list of weights]
  #  Optional. If not specified in the file, then "1" is used as the weight number for all tiles
  #  A list of full numbers separated with commas, there should be a weight number for every tile in the source texture, otherwise error
  #  The probability (in %) to find a specific tile at a random position in-game is calculated as following:
  #  Weight number of the tile divided by the sum of all weight numbers
  symmetry: <none | opposite | all>
  #  Optional. If not specified in the file, then "none" is used as the default setting
  #  none: All 6 faces are textured independently
  #  opposite: Opposing faces show the same texture, but each pair can potentially have a different texture
  #  all: All 6 faces of a block use exact the same texture (6-way symmetry)


  ###  Random multiblock flora method:
  method: flora
  height: (n)
  #  Source texture can contain any number of tile columns, the number of rows of the tile sheet is calculated as following: y=(n²+n)/2
  #  n: Maximum growth height in blocks (equal to number of texture tiles for the tallest growth stage and number of possible growth stages)
  #  The growth height must be defined, be at least 2 and must not be higher than 32, otherwise this method gives an error
  #  This method allows multiblock flora to use a separate texture for every growth stage as well as adding any number optional random variants
  #  Template for n=4 and 5 random variants: www.seedofandromeda.com/assets/images/modding/texture/method_flora.png
  #  The textures of all stages per random variant are arranged vertically in columns, with the smallest (1 block tall) at the top, and the tallest at the bottom
  #  The tile sheet can contain any number of random variants/columns in a horizontal arrangement
  #  Randomization is done in x and z direction in-game, all blocks in y direction (at a certain x,z position) use the same variant
  weights: [list of weights]
  #  Optional. If not specified in the file, then "1" is used as the weight number for all columns
  #  A list of full numbers separated with commas, there should be a weight number for every tile column in the source texture, otherwise error
  #  The probability (in %) to find a specific variant at a random position in-game is calculated as following:
  #  Weight number of the tile divided by the sum of all weight numbers




##########  General restrictions and annotations:

  ###  Texture atlasses:
  #  All texture tiles are automatically stitched to texture atlasses showing 16x16 tiles when starting the game (can be viewed in the texture pack menu)
  #  The maximum number of texture tiles per texture pack is currently limited to 65536 tiles (256 texture atlasses with 256 tiles each)
  #  Every base and overlay texture tile, normal map, displacement map and specular map tile counts as an extra tile in this case, even when they're combined to one final texture in-game

  ###  Block mesh types:
  #  All mesh types support the use of base and overlay textures as well as any form of color multiplication
  #  Support for block transparency (base texture using transparent pixels), normal, displacement and specular maps is limited to mesh type "cube" (standard blocks)
  #  The texture handling methods for blocks using mesh type "cube" are restricted to: connect, horizontal, vertical, grass, repeat, random
  #  The texture handling methods for blocks using mesh type "flat" are restricted to: connect, horizontal, vertical, repeat, random
  #  The texture handling methods for blocks using mesh types "cross" and "triangle" are restricted to: vertical, random, flora
  #  The texture handling methods for blocks using mesh type "leaves" are restricted to: random