#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 distVec;
in vec3 fcolor;
in vec3 vertexPosWorld;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.

uniform sampler2D textures[8];
uniform sampler2D Glow;
uniform sampler2D Color;

uniform vec3 AmbientLight;
uniform vec3 LightColor;
uniform vec3 FogColor;
uniform float textureUnitID;
uniform float hasAlpha;
uniform vec3 LightPosition_worldspace;
uniform float gamma;
in float fogFactor;

void main(){

	// Material properties
	vec3 colr;
	vec4 MaterialDiffuseColor;
	
	//for fog sky blending
	vec3 V = normalize(vertexPosWorld);
    vec3 L = normalize(LightPosition_worldspace);
	float vl = clamp(dot(V, L), 0, 1);
	if (V.y < 0.0) V.y = 0.0;
	 // Look up the sky color and glow colors.
    vec4 Kc = texture2D(Color, vec2((L.y + 1.0) / 2.0, V.y)).rgba;
    vec4 Kg = texture2D(Glow,  vec2((L.y + 1.0) / 2.0, vl)).rgba;
	vec3 fogColor = vec3(Kc.rgb + Kg.rgb * Kg.a);	
	
	if (textureUnitID == 0.0){
		MaterialDiffuseColor = texture2D( textures[0], UV ).rgba;
	}else if (textureUnitID == 1.0){
		MaterialDiffuseColor = texture2D( textures[1], UV ).rgba;
	}else if (textureUnitID == 2.0){
		MaterialDiffuseColor = texture2D( textures[2], UV ).rgba;
	}else if (textureUnitID == 3.0){
		MaterialDiffuseColor = texture2D( textures[3], UV ).rgba;
	}else if (textureUnitID == 4.0){
		MaterialDiffuseColor = texture2D( textures[4], UV ).rgba;
	}else if (textureUnitID == 5.0){
		MaterialDiffuseColor = texture2D( textures[5], UV ).rgba;
	}else if (textureUnitID == 6.0){
		MaterialDiffuseColor = texture2D( textures[6], UV ).rgba;
	}else if (textureUnitID == 7.0){
		MaterialDiffuseColor = texture2D( textures[7], UV ).rgba;
	}else{
		MaterialDiffuseColor = texture2D( textures[7], UV ).rgba;
	}
	
	if (MaterialDiffuseColor.a < 0.3) discard;
	if (hasAlpha == 0.0 && MaterialDiffuseColor.a < 0.9) discard;

	vec3 MaterialAmbiantColor = AmbientLight * MaterialDiffuseColor.rgb * fcolor.rgb;
	MaterialAmbiantColor = pow(MaterialAmbiantColor, vec3(gamma));
	color = pow(vec4(mix(fogColor, MaterialAmbiantColor, fogFactor), MaterialDiffuseColor.a), vec4(1.0/1.2));
}